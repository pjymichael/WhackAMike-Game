module random (
    input clk,  // clock
    input rst,  // reset
    output out[16]
  ) {

  //extra functionality
  .clk(clk){
   edge_detector edge_detector_rng;
   edge_detector edge_detector_seed;
   dff random[16]; //random register to store the randomised number sequence
   dff seed[16];//don't reset the seed because we don't want the same random number each time we press reset
    
  .rst(rst){
     counter slowclock_forvariablecounter(#SIZE(1),#DIV(21)); //helps to continuosly change the seed value to produce a different random 
                                                              //output evertime
     counter slowerclock(#SIZE(1), #DIV(26)); //slow clock to be able to see the leds turn on randomly
     pn_gen rand;
    }
 }
  
  always {
    rand.seed = seed.q;
    
    edge_detector_rng.in = slowerclock.value;
    rand.next = edge_detector_rng.out;
    
    edge_detector_seed.in = slowclock_forvariablecounter.value;
    
    //when seed edge detector is high, we increment the seed value
    if(edge_detector_seed.out){
      seed.d = seed.q + 1;
    }
    //if edge edge_detector_rng is high
    if(edge_detector_rng.out){
          rand.seed = seed.q; //assign seed value to pn_gen component seed value
          rand.next = 1; //set next as 1 for continuous number generation
          random.d = rand.num[15:0]; //retrieve the random output and assign to random reg
    }
    out = random.q;
  }
}
