module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    //define the necessary components
    button_conditioner buttoncond[5];
    edge_detector buttondetect[5](#RISE(1), #FALL(0)); //detect on rising edge only
    //declare manualPress module since we are retrieveing the computed output from manualpress to output on led
    manualPress press(.rst(rst));
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits

    //main code here
    press.io_dip = io_dip;//assign the dip switches from the main to the manual press module***iMPT***
    buttoncond.in = io_button[4:0];
    buttondetect.in = buttoncond.out;
    press.buttons = buttondetect.out;//when edge detector detects risin edge (1), then trigger input becomes 1
    //output shown on arrays of leds
    io_led[0] = press.out_compute[7:0];//retrieve output from compute reg in manual press
    io_led[1] = press.out_compute[15:8];
    io_led[2] = press.out_nvz;    
  }
}