/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_tester_1 (
    input clk,
    input reset,
    output reg [15:0] compute_led,
    output reg [0:0] correct_led,
    output reg [0:0] error_led,
    output reg [2:0] nvz_led,
    input [23:0] dps
  );
  
  
  
  wire [1-1:0] M_slowClock_value;
  counter_3 slowClock (
    .clk(clk),
    .rst(reset),
    .value(M_slowClock_value)
  );
  
  wire [1-1:0] M_slowClockEdge_out;
  reg [1-1:0] M_slowClockEdge_in;
  edge_detector_4 slowClockEdge (
    .clk(clk),
    .in(M_slowClockEdge_in),
    .out(M_slowClockEdge_out)
  );
  
  reg [4:0] M_addr_d, M_addr_q = 1'h0;
  
  wire [16-1:0] M_alu_out;
  wire [3-1:0] M_alu_nvz;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn_sig;
  alu_5 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn_sig(M_alu_alufn_sig),
    .out(M_alu_out),
    .nvz(M_alu_nvz)
  );
  
  wire [54-1:0] M_rom_value;
  reg [5-1:0] M_rom_address;
  hardcodeROM_6 rom (
    .clk(clk),
    .rst(reset),
    .address(M_rom_address),
    .value(M_rom_value)
  );
  
  
  localparam RUN_testAluFsm = 1'd0;
  
  reg M_testAluFsm_d, M_testAluFsm_q = RUN_testAluFsm;
  
  reg [15:0] compute_out;
  
  always @* begin
    M_testAluFsm_d = M_testAluFsm_q;
    M_addr_d = M_addr_q;
    
    M_slowClockEdge_in = M_slowClock_value;
    compute_led = 16'h0000;
    M_alu_alufn_sig = 6'h00;
    M_alu_a = 16'h0000;
    M_alu_b = 16'h0000;
    M_rom_address = 1'h0;
    correct_led = 1'h0;
    error_led = 1'h0;
    nvz_led = 1'h0;
    
    case (M_testAluFsm_q)
      RUN_testAluFsm: begin
        M_rom_address = M_addr_q;
        M_alu_alufn_sig = M_rom_value[48+5-:6];
        M_alu_a = M_rom_value[32+15-:16];
        M_alu_b = M_rom_value[16+15-:16];
        compute_out = M_alu_out;
        if (compute_out == M_rom_value[0+15-:16]) begin
          error_led = 1'h0;
          compute_led = M_alu_out;
          correct_led = 1'h1;
          nvz_led = M_alu_nvz;
          M_addr_d = M_addr_q + 1'h1;
          M_testAluFsm_d = RUN_testAluFsm;
        end
        if (dps[0+0+0-:1] == 1'h1) begin
          compute_out = M_alu_out ^ 16'hffff;
          if (compute_out != M_rom_value[0+15-:16]) begin
            error_led = 1'h1;
            correct_led = 1'h0;
            compute_led = compute_out;
            M_addr_d = M_addr_q + 1'h1;
            M_testAluFsm_d = RUN_testAluFsm;
          end
        end
        if (compute_out != M_rom_value[0+15-:16]) begin
          error_led = 1'h1;
          M_addr_d = M_addr_q + 1'h1;
          M_testAluFsm_d = RUN_testAluFsm;
        end
        if (M_addr_q > 5'h16) begin
          M_addr_d = 1'h0;
        end
      end
      default: begin
        M_alu_alufn_sig = 6'h00;
        M_alu_a = 16'h0000;
        M_alu_b = 16'h0000;
        M_testAluFsm_d = M_testAluFsm_q;
      end
    endcase
  end
  
  always @(posedge M_slowClock_value) begin
    if (reset == 1'b1) begin
      M_addr_q <= 1'h0;
    end else begin
      M_addr_q <= M_addr_d;
    end
  end
  
  
  always @(posedge M_slowClock_value) begin
    M_testAluFsm_q <= M_testAluFsm_d;
  end
  
endmodule
