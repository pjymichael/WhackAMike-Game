/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module control_6 (
    input clk,
    input rst,
    input [15:0] ra_datain,
    input [15:0] rb_datain,
    input [7:0] p1buttonpress,
    input decrease_timer,
    input [4:0] p1_button,
    input [4:0] p2_button,
    input [7:0] p2buttonpress,
    output reg [5:0] alufn,
    output reg [2:0] asel,
    output reg [3:0] bsel,
    output reg [0:0] wdsel,
    output reg [0:0] we,
    output reg [3:0] rc,
    output reg [3:0] ra,
    output reg [3:0] rb
  );
  
  
  
  localparam START_game_fsm = 6'd0;
  localparam RESET_P1WIN_game_fsm = 6'd1;
  localparam RESET_P2WIN_game_fsm = 6'd2;
  localparam RESET_P1SCORE_game_fsm = 6'd3;
  localparam RESET_P2SCORE_game_fsm = 6'd4;
  localparam SET_ROUND_game_fsm = 6'd5;
  localparam CHECK_ROUND_game_fsm = 6'd6;
  localparam NORMAL_MODE_game_fsm = 6'd7;
  localparam TURBO_MODE_game_fsm = 6'd8;
  localparam GEN_MIKE_game_fsm = 6'd9;
  localparam GEN_DYNAMIKE_game_fsm = 6'd10;
  localparam OUT_MIKE_game_fsm = 6'd11;
  localparam OUT_DYNAMIKE_game_fsm = 6'd12;
  localparam WAIT_PLAYERINPUT_game_fsm = 6'd13;
  localparam CHECK_TIMER_game_fsm = 6'd14;
  localparam INCREMENT_ROUND_game_fsm = 6'd15;
  localparam CHECKWHACK_P1_game_fsm = 6'd16;
  localparam NORMMIKE_WHACKED_P1_game_fsm = 6'd17;
  localparam DYNAMIKE_WHACKED_P1_game_fsm = 6'd18;
  localparam INCREASE_P1SCORE_game_fsm = 6'd19;
  localparam DECREASE_P1SCORE_game_fsm = 6'd20;
  localparam CHECK_P1SCORE_game_fsm = 6'd21;
  localparam CHECK_ZEROP1SCORE_game_fsm = 6'd22;
  localparam P1_WIN_game_fsm = 6'd23;
  localparam GAMEOVER_game_fsm = 6'd24;
  localparam BRANCH_CHECK_ZEROP1SCORE_game_fsm = 6'd25;
  localparam BRANCH_CHECK_ROUND_game_fsm = 6'd26;
  localparam BRANCH_CHECK_TIMER_game_fsm = 6'd27;
  localparam BRANCH_CHECK_P1SCORE_game_fsm = 6'd28;
  localparam DECREASE_TIMER_game_fsm = 6'd29;
  localparam CHECKLESS_THANTHREE_P1_game_fsm = 6'd30;
  localparam BRANCH_CHECKLESS_THANTHREE_P1_game_fsm = 6'd31;
  localparam DECREASE_P1SCORE_BYTHREE_game_fsm = 6'd32;
  localparam DECREASE_P1SCORE_BYTWO_game_fsm = 6'd33;
  localparam CHECKSCORE_EQUALTWO_P1_game_fsm = 6'd34;
  localparam BRANCH_CHECKSCORE_EQUALTWO_P1_game_fsm = 6'd35;
  localparam CHECKSCORE_EQUALONE_P1_game_fsm = 6'd36;
  localparam BRANCH_CHECKSCORE_EQUALONE_P1_game_fsm = 6'd37;
  localparam STOREP1_WIN_game_fsm = 6'd38;
  localparam CHECKWHACK_P2_game_fsm = 6'd39;
  localparam NORMMIKE_WHACKED_P2_game_fsm = 6'd40;
  localparam DYNAMIKE_WHACKED_P2_game_fsm = 6'd41;
  localparam CHECK_ZEROP2SCORE_game_fsm = 6'd42;
  localparam INCREASE_P2SCORE_game_fsm = 6'd43;
  localparam CHECK_P2SCORE_game_fsm = 6'd44;
  localparam BRANCH_CHECK_P2SCORE_game_fsm = 6'd45;
  localparam P2_WIN_game_fsm = 6'd46;
  localparam CHECKLESS_THANTHREE_P2_game_fsm = 6'd47;
  localparam BRANCH_CHECKLESS_THANTHREE_P2_game_fsm = 6'd48;
  localparam CHECKSCORE_EQUALTWO_P2_game_fsm = 6'd49;
  localparam DECREASE_P2SCORE_BYTHREE_game_fsm = 6'd50;
  localparam BRANCH_CHECKSCORE_EQUALTWO_P2_game_fsm = 6'd51;
  localparam DECREASE_P2SCORE_BYTWO_game_fsm = 6'd52;
  localparam CHECKSCORE_EQUALONE_P2_game_fsm = 6'd53;
  localparam BRANCH_CHECKSCORE_EQUALONE_P2_game_fsm = 6'd54;
  localparam DECREASE_P2SCORE_game_fsm = 6'd55;
  localparam BRANCH_CHECK_ZEROP2SCORE_game_fsm = 6'd56;
  localparam STOREP2_WIN_game_fsm = 6'd57;
  
  reg [5:0] M_game_fsm_d, M_game_fsm_q = START_game_fsm;
  
  always @* begin
    M_game_fsm_d = M_game_fsm_q;
    
    alufn = 6'h00;
    asel = 3'h0;
    bsel = 3'h0;
    wdsel = 1'h0;
    we = 1'h0;
    rc = 16'h0000;
    ra = 16'h0000;
    rb = 16'h0000;
    
    case (M_game_fsm_q)
      START_game_fsm: begin
        M_game_fsm_d = RESET_P1WIN_game_fsm;
      end
      RESET_P1WIN_game_fsm: begin
        we = 1'h1;
        rc = 4'h2;
        wdsel = 1'h1;
        M_game_fsm_d = RESET_P2WIN_game_fsm;
      end
      RESET_P2WIN_game_fsm: begin
        we = 1'h1;
        rc = 4'h3;
        wdsel = 1'h1;
        M_game_fsm_d = RESET_P1SCORE_game_fsm;
      end
      RESET_P1SCORE_game_fsm: begin
        we = 1'h1;
        rc = 4'h0;
        wdsel = 1'h1;
        M_game_fsm_d = RESET_P2SCORE_game_fsm;
      end
      RESET_P2SCORE_game_fsm: begin
        we = 1'h1;
        rc = 4'h1;
        wdsel = 1'h1;
        M_game_fsm_d = SET_ROUND_game_fsm;
      end
      SET_ROUND_game_fsm: begin
        we = 1'h1;
        rc = 4'ha;
        wdsel = 1'h1;
        M_game_fsm_d = CHECK_ROUND_game_fsm;
      end
      CHECK_ROUND_game_fsm: begin
        alufn = 6'h37;
        asel = 3'h0;
        bsel = 4'h3;
        we = 1'h1;
        ra = 4'ha;
        rc = 4'hc;
        wdsel = 1'h0;
        M_game_fsm_d = BRANCH_CHECK_ROUND_game_fsm;
      end
      BRANCH_CHECK_ROUND_game_fsm: begin
        rb = 4'hc;
        if (rb_datain[0+0-:1]) begin
          M_game_fsm_d = NORMAL_MODE_game_fsm;
        end else begin
          M_game_fsm_d = TURBO_MODE_game_fsm;
        end
      end
      NORMAL_MODE_game_fsm: begin
        alufn = 6'h00;
        bsel = 4'h2;
        we = 1'h1;
        ra = 4'hb;
        rc = 4'hb;
        wdsel = 1'h0;
        M_game_fsm_d = GEN_MIKE_game_fsm;
      end
      TURBO_MODE_game_fsm: begin
        alufn = 6'h00;
        bsel = 4'h6;
        ra = 4'hb;
        we = 1'h1;
        rc = 4'hb;
        wdsel = 1'h0;
        M_game_fsm_d = GEN_MIKE_game_fsm;
      end
      GEN_MIKE_game_fsm: begin
        alufn = 6'h1a;
        asel = 3'h1;
        we = 1'h1;
        rc = 4'h4;
        wdsel = 1'h0;
        M_game_fsm_d = GEN_DYNAMIKE_game_fsm;
      end
      GEN_DYNAMIKE_game_fsm: begin
        alufn = 6'h1a;
        asel = 3'h5;
        we = 1'h1;
        rc = 4'h5;
        wdsel = 1'h0;
        M_game_fsm_d = OUT_MIKE_game_fsm;
      end
      OUT_MIKE_game_fsm: begin
        alufn = 6'h19;
        asel = 3'h0;
        bsel = 4'h0;
        we = 1'h1;
        ra = 4'h4;
        rb = 4'h5;
        rc = 4'h8;
        wdsel = 1'h0;
        M_game_fsm_d = OUT_DYNAMIKE_game_fsm;
      end
      OUT_DYNAMIKE_game_fsm: begin
        alufn = 6'h1c;
        asel = 3'h0;
        bsel = 4'h0;
        we = 1'h1;
        ra = 4'h4;
        rb = 4'h5;
        rc = 4'h9;
        wdsel = 1'h0;
        M_game_fsm_d = WAIT_PLAYERINPUT_game_fsm;
      end
      WAIT_PLAYERINPUT_game_fsm: begin
        if (decrease_timer) begin
          M_game_fsm_d = CHECK_TIMER_game_fsm;
        end else begin
          if (p1_button[0+0-:1] || p1_button[1+0-:1] || p1_button[2+0-:1] || p1_button[3+0-:1] || p1_button[4+0-:1]) begin
            if (p1_button[0+0-:1]) begin
              alufn = 6'h1a;
              asel = 3'h2;
              we = 1'h1;
              wdsel = 1'h0;
              rc = 4'h6;
              M_game_fsm_d = CHECKWHACK_P1_game_fsm;
            end else begin
              if (p1_button[1+0-:1]) begin
                alufn = 6'h1a;
                asel = 3'h6;
                we = 1'h1;
                wdsel = 1'h0;
                rc = 4'h6;
                M_game_fsm_d = CHECKWHACK_P1_game_fsm;
              end else begin
                if (p1_button[2+0-:1]) begin
                  alufn = 6'h1a;
                  asel = 3'h7;
                  we = 1'h1;
                  wdsel = 1'h0;
                  rc = 4'h6;
                  M_game_fsm_d = CHECKWHACK_P1_game_fsm;
                end else begin
                  if (p1_button[3+0-:1]) begin
                    alufn = 6'h1b;
                    bsel = 4'h5;
                    we = 1'h1;
                    wdsel = 1'h0;
                    rc = 4'h6;
                    M_game_fsm_d = CHECKWHACK_P1_game_fsm;
                  end else begin
                    if (p1_button[4+0-:1]) begin
                      alufn = 6'h1b;
                      bsel = 4'h7;
                      we = 1'h1;
                      wdsel = 1'h0;
                      rc = 4'h6;
                      M_game_fsm_d = CHECKWHACK_P1_game_fsm;
                    end
                  end
                end
              end
            end
          end else begin
            if (p2_button[0+0-:1] || p2_button[1+0-:1] || p2_button[2+0-:1] || p2_button[3+0-:1] || p2_button[4+0-:1]) begin
              if (p2_button[0+0-:1]) begin
                alufn = 6'h1a;
                asel = 3'h2;
                we = 1'h1;
                wdsel = 1'h0;
                rc = 4'h7;
                M_game_fsm_d = CHECKWHACK_P2_game_fsm;
              end else begin
                if (p2_button[1+0-:1]) begin
                  alufn = 6'h1a;
                  asel = 3'h6;
                  we = 1'h1;
                  wdsel = 1'h0;
                  rc = 4'h7;
                  M_game_fsm_d = CHECKWHACK_P2_game_fsm;
                end else begin
                  if (p2_button[2+0-:1]) begin
                    alufn = 6'h1a;
                    asel = 3'h7;
                    we = 1'h1;
                    wdsel = 1'h0;
                    rc = 4'h7;
                    M_game_fsm_d = CHECKWHACK_P2_game_fsm;
                  end else begin
                    if (p2_button[3+0-:1]) begin
                      alufn = 6'h1b;
                      bsel = 4'h5;
                      we = 1'h1;
                      wdsel = 1'h0;
                      rc = 4'h7;
                      M_game_fsm_d = CHECKWHACK_P2_game_fsm;
                    end else begin
                      if (p2_button[4+0-:1]) begin
                        alufn = 6'h1b;
                        bsel = 4'h7;
                        we = 1'h1;
                        wdsel = 1'h0;
                        rc = 4'h7;
                        M_game_fsm_d = CHECKWHACK_P2_game_fsm;
                      end
                    end
                  end
                end
              end
            end else begin
              M_game_fsm_d = WAIT_PLAYERINPUT_game_fsm;
            end
          end
        end
      end
      CHECK_TIMER_game_fsm: begin
        alufn = 6'h33;
        asel = 3'h0;
        bsel = 4'h1;
        we = 1'h1;
        ra = 4'hb;
        rc = 4'hd;
        wdsel = 1'h0;
        M_game_fsm_d = BRANCH_CHECK_TIMER_game_fsm;
      end
      BRANCH_CHECK_TIMER_game_fsm: begin
        rb = 4'hd;
        if (rb_datain[0+0-:1] == 1'h1) begin
          M_game_fsm_d = INCREMENT_ROUND_game_fsm;
        end else begin
          M_game_fsm_d = DECREASE_TIMER_game_fsm;
        end
      end
      DECREASE_TIMER_game_fsm: begin
        alufn = 6'h01;
        bsel = 4'h6;
        asel = 3'h0;
        ra = 4'hb;
        rc = 4'hb;
        wdsel = 1'h0;
        we = 1'h1;
        M_game_fsm_d = WAIT_PLAYERINPUT_game_fsm;
      end
      INCREMENT_ROUND_game_fsm: begin
        alufn = 6'h00;
        asel = 3'h0;
        bsel = 4'h6;
        we = 1'h1;
        ra = 4'ha;
        rc = 4'ha;
        wdsel = 1'h0;
        M_game_fsm_d = CHECK_ROUND_game_fsm;
      end
      CHECKWHACK_P1_game_fsm: begin
        ra = 4'h8;
        rb = 4'h9;
        if (p1buttonpress[(p1buttonpress[5+2-:3])*1+0-:1] == ra_datain[(p1buttonpress[5+2-:3])*1+0-:1]) begin
          M_game_fsm_d = NORMMIKE_WHACKED_P1_game_fsm;
        end else begin
          if (p1buttonpress[(p1buttonpress[5+2-:3])*1+0-:1] == rb_datain[(p1buttonpress[5+2-:3])*1+0-:1]) begin
            M_game_fsm_d = DYNAMIKE_WHACKED_P1_game_fsm;
          end else begin
            M_game_fsm_d = WAIT_PLAYERINPUT_game_fsm;
          end
        end
      end
      NORMMIKE_WHACKED_P1_game_fsm: begin
        alufn = 6'h16;
        asel = 3'h4;
        bsel = 4'h0;
        we = 1'h1;
        rb = 4'h6;
        rc = 4'h8;
        wdsel = 1'h0;
        M_game_fsm_d = INCREASE_P1SCORE_game_fsm;
      end
      INCREASE_P1SCORE_game_fsm: begin
        alufn = 6'h00;
        asel = 3'h0;
        bsel = 4'h6;
        we = 1'h1;
        ra = 4'h0;
        rc = 4'h0;
        wdsel = 1'h0;
        M_game_fsm_d = CHECK_P1SCORE_game_fsm;
      end
      CHECK_P1SCORE_game_fsm: begin
        alufn = 6'h33;
        asel = 3'h3;
        bsel = 4'h0;
        we = 1'h1;
        rb = 4'h0;
        rc = 4'h2;
        wdsel = 1'h0;
        M_game_fsm_d = BRANCH_CHECK_P1SCORE_game_fsm;
      end
      BRANCH_CHECK_P1SCORE_game_fsm: begin
        ra = 4'h2;
        if (ra_datain[0+0-:1]) begin
          M_game_fsm_d = P1_WIN_game_fsm;
        end else begin
          M_game_fsm_d = WAIT_PLAYERINPUT_game_fsm;
        end
      end
      DYNAMIKE_WHACKED_P1_game_fsm: begin
        alufn = 6'h16;
        asel = 3'h0;
        bsel = 4'h4;
        we = 1'h1;
        ra = 4'h6;
        rc = 4'h9;
        wdsel = 1'h0;
        M_game_fsm_d = CHECKLESS_THANTHREE_P1_game_fsm;
      end
      CHECKLESS_THANTHREE_P1_game_fsm: begin
        alufn = 6'h35;
        asel = 3'h0;
        bsel = 4'h8;
        we = 1'h1;
        ra = 4'h0;
        rc = 4'he;
        wdsel = 1'h0;
        M_game_fsm_d = BRANCH_CHECKLESS_THANTHREE_P1_game_fsm;
      end
      BRANCH_CHECKLESS_THANTHREE_P1_game_fsm: begin
        rb = 4'he;
        if (rb_datain[0+0-:1]) begin
          M_game_fsm_d = CHECKSCORE_EQUALTWO_P1_game_fsm;
        end else begin
          M_game_fsm_d = DECREASE_P1SCORE_BYTHREE_game_fsm;
        end
      end
      CHECKSCORE_EQUALTWO_P1_game_fsm: begin
        alufn = 6'h33;
        asel = 3'h0;
        bsel = 4'h2;
        we = 1'h1;
        wdsel = 1'h0;
        ra = 4'h0;
        rc = 4'he;
        M_game_fsm_d = BRANCH_CHECKSCORE_EQUALTWO_P1_game_fsm;
      end
      BRANCH_CHECKSCORE_EQUALTWO_P1_game_fsm: begin
        ra = 4'he;
        if (ra_datain[0+0-:1]) begin
          M_game_fsm_d = DECREASE_P1SCORE_BYTWO_game_fsm;
        end else begin
          M_game_fsm_d = CHECKSCORE_EQUALONE_P1_game_fsm;
        end
      end
      CHECKSCORE_EQUALONE_P1_game_fsm: begin
        alufn = 6'h33;
        asel = 3'h0;
        bsel = 4'h6;
        we = 1'h1;
        wdsel = 1'h0;
        ra = 4'h0;
        rc = 4'he;
        M_game_fsm_d = BRANCH_CHECKSCORE_EQUALONE_P1_game_fsm;
      end
      BRANCH_CHECKSCORE_EQUALONE_P1_game_fsm: begin
        ra = 4'he;
        if (ra_datain[0+0-:1]) begin
          M_game_fsm_d = DECREASE_P1SCORE_game_fsm;
        end else begin
          M_game_fsm_d = WAIT_PLAYERINPUT_game_fsm;
        end
      end
      DECREASE_P1SCORE_BYTWO_game_fsm: begin
        alufn = 6'h01;
        asel = 3'h0;
        bsel = 4'h2;
        we = 1'h1;
        ra = 4'h0;
        rc = 4'h0;
        wdsel = 1'h0;
        M_game_fsm_d = WAIT_PLAYERINPUT_game_fsm;
      end
      DECREASE_P1SCORE_BYTHREE_game_fsm: begin
        alufn = 6'h01;
        asel = 3'h0;
        bsel = 4'h8;
        we = 1'h1;
        ra = 4'h0;
        rc = 4'h0;
        wdsel = 1'h0;
        M_game_fsm_d = WAIT_PLAYERINPUT_game_fsm;
      end
      CHECK_ZEROP1SCORE_game_fsm: begin
        alufn = 6'h33;
        asel = 3'h0;
        bsel = 4'h1;
        we = 1'h1;
        ra = 4'h0;
        rc = 4'hf;
        wdsel = 1'h0;
        M_game_fsm_d = BRANCH_CHECK_ZEROP1SCORE_game_fsm;
      end
      BRANCH_CHECK_ZEROP1SCORE_game_fsm: begin
        rb = 4'hf;
        if (rb_datain[0+0-:1]) begin
          M_game_fsm_d = WAIT_PLAYERINPUT_game_fsm;
        end else begin
          M_game_fsm_d = DECREASE_P1SCORE_game_fsm;
        end
      end
      DECREASE_P1SCORE_game_fsm: begin
        alufn = 6'h01;
        asel = 3'h0;
        bsel = 4'h6;
        we = 1'h1;
        ra = 4'h0;
        rc = 4'h0;
        wdsel = 1'h0;
        M_game_fsm_d = WAIT_PLAYERINPUT_game_fsm;
      end
      P1_WIN_game_fsm: begin
        alufn = 6'h1a;
        asel = 3'h3;
        we = 1'h1;
        rc = 4'h0;
        wdsel = 1'h0;
        M_game_fsm_d = STOREP1_WIN_game_fsm;
      end
      STOREP1_WIN_game_fsm: begin
        alufn = 6'h1b;
        bsel = 4'h6;
        we = 1'h1;
        rc = 4'h2;
        wdsel = 1'h0;
        M_game_fsm_d = GAMEOVER_game_fsm;
      end
      CHECKWHACK_P2_game_fsm: begin
        ra = 4'h8;
        rb = 4'h9;
        if (p2buttonpress[(p2buttonpress[5+2-:3])*1+0-:1] == ra_datain[(p2buttonpress[5+2-:3])*1+0-:1]) begin
          M_game_fsm_d = NORMMIKE_WHACKED_P2_game_fsm;
        end else begin
          if (p2buttonpress[(p2buttonpress[5+2-:3])*1+0-:1] == rb_datain[(p2buttonpress[5+2-:3])*1+0-:1]) begin
            M_game_fsm_d = DYNAMIKE_WHACKED_P2_game_fsm;
          end else begin
            M_game_fsm_d = WAIT_PLAYERINPUT_game_fsm;
          end
        end
      end
      NORMMIKE_WHACKED_P2_game_fsm: begin
        alufn = 6'h16;
        asel = 3'h4;
        bsel = 4'h0;
        we = 1'h1;
        rb = 4'h7;
        rc = 4'h8;
        wdsel = 1'h0;
        M_game_fsm_d = INCREASE_P2SCORE_game_fsm;
      end
      INCREASE_P2SCORE_game_fsm: begin
        alufn = 6'h00;
        asel = 3'h0;
        bsel = 4'h6;
        we = 1'h1;
        ra = 4'h1;
        rc = 4'h1;
        wdsel = 1'h0;
        M_game_fsm_d = CHECK_P2SCORE_game_fsm;
      end
      CHECK_P2SCORE_game_fsm: begin
        alufn = 6'h33;
        asel = 3'h3;
        bsel = 4'h0;
        we = 1'h1;
        rb = 4'h1;
        rc = 4'h3;
        wdsel = 1'h0;
        M_game_fsm_d = BRANCH_CHECK_P2SCORE_game_fsm;
      end
      BRANCH_CHECK_P2SCORE_game_fsm: begin
        ra = 4'h3;
        if (ra_datain[0+0-:1]) begin
          M_game_fsm_d = P2_WIN_game_fsm;
        end else begin
          M_game_fsm_d = WAIT_PLAYERINPUT_game_fsm;
        end
      end
      DYNAMIKE_WHACKED_P2_game_fsm: begin
        alufn = 6'h16;
        asel = 3'h0;
        bsel = 4'h4;
        we = 1'h1;
        ra = 4'h7;
        rc = 4'h9;
        wdsel = 1'h0;
        M_game_fsm_d = CHECKLESS_THANTHREE_P2_game_fsm;
      end
      CHECKLESS_THANTHREE_P2_game_fsm: begin
        alufn = 6'h35;
        asel = 3'h0;
        bsel = 4'h8;
        we = 1'h1;
        ra = 4'h1;
        rc = 4'he;
        wdsel = 1'h0;
        M_game_fsm_d = BRANCH_CHECKLESS_THANTHREE_P2_game_fsm;
      end
      BRANCH_CHECKLESS_THANTHREE_P2_game_fsm: begin
        rb = 4'he;
        if (rb_datain[0+0-:1]) begin
          M_game_fsm_d = CHECKSCORE_EQUALTWO_P2_game_fsm;
        end else begin
          M_game_fsm_d = DECREASE_P2SCORE_BYTHREE_game_fsm;
        end
      end
      CHECKSCORE_EQUALTWO_P2_game_fsm: begin
        alufn = 6'h33;
        asel = 3'h0;
        bsel = 4'h2;
        we = 1'h1;
        wdsel = 1'h0;
        ra = 4'h1;
        rc = 4'he;
        M_game_fsm_d = BRANCH_CHECKSCORE_EQUALTWO_P2_game_fsm;
      end
      BRANCH_CHECKSCORE_EQUALTWO_P2_game_fsm: begin
        ra = 4'he;
        if (ra_datain[0+0-:1]) begin
          M_game_fsm_d = DECREASE_P2SCORE_BYTWO_game_fsm;
        end else begin
          M_game_fsm_d = CHECKSCORE_EQUALONE_P2_game_fsm;
        end
      end
      CHECKSCORE_EQUALONE_P2_game_fsm: begin
        alufn = 6'h33;
        asel = 3'h0;
        bsel = 4'h6;
        we = 1'h1;
        wdsel = 1'h0;
        ra = 4'h1;
        rc = 4'he;
        M_game_fsm_d = BRANCH_CHECKSCORE_EQUALONE_P2_game_fsm;
      end
      BRANCH_CHECKSCORE_EQUALONE_P2_game_fsm: begin
        ra = 4'he;
        if (ra_datain[0+0-:1]) begin
          M_game_fsm_d = DECREASE_P2SCORE_game_fsm;
        end else begin
          M_game_fsm_d = WAIT_PLAYERINPUT_game_fsm;
        end
      end
      DECREASE_P2SCORE_BYTWO_game_fsm: begin
        alufn = 6'h01;
        asel = 3'h0;
        bsel = 4'h2;
        we = 1'h1;
        ra = 4'h1;
        rc = 4'h1;
        wdsel = 1'h0;
        M_game_fsm_d = WAIT_PLAYERINPUT_game_fsm;
      end
      DECREASE_P2SCORE_BYTHREE_game_fsm: begin
        alufn = 6'h01;
        asel = 3'h0;
        bsel = 4'h8;
        we = 1'h1;
        ra = 4'h1;
        rc = 4'h1;
        wdsel = 1'h0;
        M_game_fsm_d = WAIT_PLAYERINPUT_game_fsm;
      end
      CHECK_ZEROP2SCORE_game_fsm: begin
        alufn = 6'h33;
        asel = 3'h0;
        bsel = 4'h1;
        we = 1'h1;
        ra = 4'h1;
        rc = 4'hf;
        wdsel = 1'h0;
        M_game_fsm_d = BRANCH_CHECK_ZEROP2SCORE_game_fsm;
      end
      BRANCH_CHECK_ZEROP2SCORE_game_fsm: begin
        rb = 4'hf;
        if (rb_datain[0+0-:1]) begin
          M_game_fsm_d = WAIT_PLAYERINPUT_game_fsm;
        end else begin
          M_game_fsm_d = DECREASE_P2SCORE_game_fsm;
        end
      end
      DECREASE_P2SCORE_game_fsm: begin
        alufn = 6'h01;
        asel = 3'h0;
        bsel = 4'h6;
        we = 1'h1;
        ra = 4'h1;
        rc = 4'h1;
        wdsel = 1'h0;
        M_game_fsm_d = WAIT_PLAYERINPUT_game_fsm;
      end
      P2_WIN_game_fsm: begin
        alufn = 6'h1a;
        asel = 3'h3;
        we = 1'h1;
        rc = 4'h1;
        wdsel = 1'h0;
        M_game_fsm_d = STOREP2_WIN_game_fsm;
      end
      STOREP2_WIN_game_fsm: begin
        alufn = 6'h1b;
        bsel = 4'h6;
        we = 1'h1;
        rc = 4'h3;
        wdsel = 1'h0;
        M_game_fsm_d = GAMEOVER_game_fsm;
      end
      GAMEOVER_game_fsm: begin
        if (rst) begin
          M_game_fsm_d = START_game_fsm;
        end else begin
          M_game_fsm_d = GAMEOVER_game_fsm;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_game_fsm_q <= 1'h0;
    end else begin
      M_game_fsm_q <= M_game_fsm_d;
    end
  end
  
endmodule
